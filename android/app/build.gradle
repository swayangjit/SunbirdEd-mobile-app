apply plugin: 'com.android.application'

ext {
   
}

android {
    namespace "org.sunbird"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId app_id.replaceAll("\\s","")
        resValue("string", "app_name", "${app_name}")
        resValue("string", "app_id", "${app_id}")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode 1
        ext.buildNumber = System.getenv("TRAVIS_BUILD_NUMBER") ?: "local"
		versionName "8.0.local"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        sign
    }
    buildTypes {
        release {
            signingConfig signingConfigs.sign
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    tasks.whenTaskAdded { task ->
        def name = task.name
        //Skip some unnecessary tasks
        if (name.startsWith("bundle")
                && !name.contains("Classes")
                && !name.contains("Resources")
                && name != "bundle"
                && name != "bundleDebug") {

            def renameTaskName = "rename${task.name.capitalize()}Aab"
            def flavor = "${flavor}"
            def type = task.name.toLowerCase().replace("bundle", "").replace("${flavor}", "").toLowerCase()
            if (flavor == null || type == null) return

            def outputName = "${app_name}-$flavor-$version".toLowerCase()
            if (!flavor.equals("production")) {
                outputName = "${app_name}-$flavor-$version".toLowerCase();
            } else {
                outputName = "${app_name}-$version".toLowerCase();
            }


            tasks.create(renameTaskName) {
                def typeInCaps = "${type}".capitalize()
                def path = "${rootDir}/app/build/outputs/bundle/${flavor}${typeInCaps}/"
                def originalFile = "${path}app-${flavor}-${type}.aab"
                println "originalFile ${originalFile}"
                println "outputName ${outputName}"
                doLast {
                    if (file("$originalFile").exists()) {
                        ant.move file: "$originalFile",
                                tofile: "$path/${outputName}.aab"
                    }
                }
            }

            task.finalizedBy(renameTaskName)
        }
    }

} // android


repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'
apply from: rootProject.file('signing.gradle')
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}